import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:get_put_delete/data/api_provider.dart';import 'package:get_put_delete/model/all_post.dart';import 'package:get_put_delete/page/addpost_page.dart';import 'package:get_put_delete/page/detail_page.dart';class HomePage extends StatefulWidget {  @override  _HomePageState createState() => _HomePageState();}class _HomePageState extends State<HomePage> {  ApiProvider provider = ApiProvider();  Future<List<AllPost>> allPost;  bool loadingDelete = false;  Future<bool> deletePost;  @override  void initState() {    allPost = provider.getAllPost();    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(      floatingActionButton: FloatingActionButton(        elevation: 0.0,        child: new Icon(Icons.add),        backgroundColor: Colors.black,        onPressed: () {          Navigator.of(context).push(            MaterialPageRoute(              builder: (BuildContext context) => AddPostPage(),            ),          );        },      ),      body: Stack(        children: <Widget>[          Container(            child: FutureBuilder(              future: allPost,              builder: (BuildContext context, AsyncSnapshot snapshot) {                if (snapshot.hasData) {                  List<AllPost> allPost = snapshot.data;                  return Container(                      margin: EdgeInsets.only(top: 20),                      child: ListView.builder(                        itemCount: allPost.length,                        itemBuilder: (BuildContext context, int index) {                          return InkWell(                            onTap: () {                              Navigator.of(context).push(                                MaterialPageRoute(                                  builder: (BuildContext context) => DetailPage(                                    allPost: allPost[index],                                  ),                                ),                              );                            },                            child: Container(                              child: Card(                                shape: RoundedRectangleBorder(                                  borderRadius:                                      BorderRadius.all(Radius.circular(10)),                                ),                                child: Row(                                  children: <Widget>[                                    Container(                                      height: 180,                                      width: 330,                                      child: Column(                                        crossAxisAlignment:                                            CrossAxisAlignment.start,                                        children: <Widget>[                                          Container(                                            margin: EdgeInsets.only(                                                top: 20, left: 15, right: 10),                                            child: Text(                                              '${allPost[index].title.toUpperCase()}',                                              style: TextStyle(                                                  fontWeight: FontWeight.bold),                                            ),                                          ),                                          Container(                                            margin: EdgeInsets.only(                                              left: 20,                                              top: 15,                                              bottom: 10,                                            ),                                            child:                                                Text('${allPost[index].body}'),                                          )                                        ],                                      ),                                    ),                                    FutureBuilder(                                      future: deletePost,                                      builder: (BuildContext context,                                          AsyncSnapshot snapshot) {                                        if (snapshot.hasData) {                                          return IconButton(                                            icon: Icon(Icons.delete),                                            onPressed: () {                                              setState(() {                                                deletePost = provider.deletePost(                                                    '${allPost[index].id.toString()}');                                              });                                              loadingDelete = true;                                            },                                          );                                        } else if (snapshot.hasError) {                                          loadingDelete = true;                                          print(                                              'Has Error : ${snapshot.hasError}');                                          return Text(' ERROR !!!');                                        } else {                                          print('Sedang Loading !!!!!! delete');                                          loadingDelete = false;                                          return IconButton(                                            icon: Icon(Icons.delete),                                            onPressed: () {                                              setState(() {                                                deletePost = provider.deletePost(                                                    '${allPost[index].id.toString()}');                                                loadingDelete = false;                                              });                                            },                                          );                                        }                                      },                                    ),                                  ],                                ),                              ),                            ),                          );                        },                      ));                } else if (snapshot.hasError) {                  print('Has Error : ${snapshot.hasError}');                  return Text(' ERROR !!!');                } else {                  print('Sedang Loading !!!!!! luar future');                  return CircularProgressIndicator();                }              },            ),          ),          loadingDelete              ? Center(child: CircularProgressIndicator())              : Container(),        ],      ),    );  }}